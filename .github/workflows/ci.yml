name: SB App CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: sb-app-ec
  MYSQL_CONTAINER_NAME: sb-app-mysql
  SPRING_DATASOURCE_DATABASE: sb-app-db
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: qualy-taste

jobs:
  setup-ec2:
    name: Setup Docker on EC2
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Ensure Docker is installed on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ec2-user
              echo "Docker installed."
            else
              echo "Docker already installed."
            fi
            docker --version
          EOF

  build-and-push:
    name: Build and Push Docker Image to ECR
    needs: setup-ec2
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      image_uri: ${{ steps.push_image.outputs.image_uri }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Set up JDK 21
        uses: actions/setup-java@v4.4.0
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build Project
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        id: push_image
        env:
          IMAGE_TAG: ${{ steps.extract_version.outputs.version }}
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker build -t $IMAGE_URI .
          docker tag $IMAGE_URI $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

          # Push both tags
          docker push $IMAGE_URI
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "Image successfully pushed to ECR: $IMAGE_URI"

  deploy-to-ec2:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy Application to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export IMAGE_URI="${{ needs.build-and-push.outputs.image_uri }}"
            export MYSQL_CONTAINER_NAME="${{ env.MYSQL_CONTAINER_NAME }}"
            export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
            export SPRING_DATASOURCE_DATABASE="${{ env.SPRING_DATASOURCE_DATABASE }}"
            export SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}"
            export SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}"

            echo "Stopping old app container, with IMAGE_NAME: \$IMAGE_NAME"
            docker stop \$IMAGE_NAME || true
            docker rm -f \$IMAGE_NAME || true

            echo "Pulling image from ECR, with IMAGE_URI: \$IMAGE_URI"
            docker pull "\$IMAGE_URI" || exit 1

            echo "Ensuring app-network exists..."
            docker network inspect app-network || docker network create app-network

            MYSQL_STATUS=\$(docker inspect -f '{{.State.Running}}' \$MYSQL_CONTAINER_NAME 2>/dev/null || echo "false")
            if [ "\$MYSQL_STATUS" != "true" ]; then
              echo "Starting MySQL container..."
              docker rm \$MYSQL_CONTAINER_NAME 2>/dev/null || true
              docker run -d --name \$MYSQL_CONTAINER_NAME \
                --network app-network \
                -e MYSQL_ROOT_PASSWORD=\$MYSQL_ROOT_PASSWORD \
                -e MYSQL_DATABASE=\$SPRING_DATASOURCE_DATABASE \
                -e MYSQL_USER=\$SPRING_DATASOURCE_USERNAME \
                -e MYSQL_PASSWORD=\$SPRING_DATASOURCE_PASSWORD \
                -p 3306:3306 \
                mysql:8.0 \
                --character-set-server=utf8mb4 \
                --collation-server=utf8mb4_unicode_ci

              echo "Waiting for MySQL..."
              for i in {1..30}; do
                docker exec \$MYSQL_CONTAINER_NAME mysqladmin ping -uroot -p\$MYSQL_ROOT_PASSWORD --silent && break
                echo "Still waiting..."
                sleep 2
              done
            else
              echo "MySQL already running."
              docker network connect app-network \$MYSQL_CONTAINER_NAME || true
            fi

            echo "Starting Spring Boot container..."
            docker run -d --name \$IMAGE_NAME \
              --network app-network \
              -p 80:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL="jdbc:mysql://\$MYSQL_CONTAINER_NAME:3306/\$SPRING_DATASOURCE_DATABASE?useSSL=false&allowPublicKeyRetrieval=true&connectionTimeout=5000" \
              -e SPRING_DATASOURCE_USERNAME=\$SPRING_DATASOURCE_USERNAME \
              -e SPRING_DATASOURCE_PASSWORD=\$SPRING_DATASOURCE_PASSWORD \
              -e SPRING_FLYWAY_ENABLED=true \
              -e SPRING_FLYWAY_LOCATIONS=classpath:db/migration \
              -e SPRING_FLYWAY_BASELINE_ON_MIGRATION=true \
              \$IMAGE_URI

            echo "Deployment complete. Showing logs:"
            docker ps -a
            docker logs \$IMAGE_NAME --tail 50
          EOF
