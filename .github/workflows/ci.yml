name: SB App CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CONTAINER_NAME: sb-app-ec
  MYSQL_CONTAINER_NAME: sb-app-mysql
  SPRING_DATASOURCE_DATABASE: sb-app-db
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: qualy-taste
  CONTAINER_PORT: 8080
  HOST_PORT: 8080
  NETWORK_NAME: app-network

jobs:
  setup-ec2:
    name: Setup Docker on EC2
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Ensure Docker is installed on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ec2-user
              echo "Docker installed."
            else
              echo "Docker already installed."
            fi
            docker --version
          EOF

  build-and-push:
    name: Build and Push Docker Image to ECR
    needs: setup-ec2
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      image_uri: ${{ steps.push_image.outputs.image_uri }}
      ecr_registry: ${{ steps.ecr-login.outputs.registry }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "maven"

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build Project
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        id: push_image
        env:
          IMAGE_TAG: ${{ steps.extract_version.outputs.version }}
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker build -t $IMAGE_URI .
          docker tag $IMAGE_URI $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

          # Push both tags
          docker push $IMAGE_URI
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "Image successfully pushed to ECR: $IMAGE_URI"

  deploy-to-ec2:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy Application to EC2
        env:
          ECR_REGISTRY: ${{ needs.build-and-push.outputs.ecr_registry }}
          IMAGE_URI: ${{ needs.build-and-push.outputs.image_uri }}
        run: |
          # Create temporary AWS credentials file
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << EOL
          [default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region=${{ env.AWS_REGION }}
          EOL

          # First, ensure .aws directory exists on EC2
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "mkdir -p ~/.aws"

          # Copy AWS credentials to EC2
          scp -o StrictHostKeyChecking=no ~/.aws/credentials ec2-user@${{ secrets.EC2_PUBLIC_IP }}:~/.aws/credentials

          # Generate ECR auth token
          ECR_AUTH_TOKEN=$(aws ecr get-login-password --region ${{ env.AWS_REGION }})

          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << EOF
            set -e

            export CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            export IMAGE_URI="${IMAGE_URI}"
            export MYSQL_CONTAINER_NAME="${{ env.MYSQL_CONTAINER_NAME }}"
            export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
            export SPRING_DATASOURCE_DATABASE="${{ env.SPRING_DATASOURCE_DATABASE }}"
            export SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}"
            export SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}"
            export AWS_REGION="${{ env.AWS_REGION }}"
            export NETWORK_NAME="${{ env.NETWORK_NAME }}"
            export CONTAINER_PORT="${{ env.CONTAINER_PORT }}"
            export HOST_PORT="${{ env.HOST_PORT }}"

            # Login to ECR using the token
            echo "$ECR_AUTH_TOKEN" | docker login --username AWS --password-stdin $ECR_REGISTRY

            echo "Stopping old app container, with CONTAINER_NAME: \$CONTAINER_NAME"
            docker stop \$CONTAINER_NAME || true
            docker rm -f \$CONTAINER_NAME || true

            echo "Pulling image from ECR, with IMAGE_URI: \$IMAGE_URI"
            docker pull "\$IMAGE_URI" || exit 1

            echo "Ensuring network exists..."
            docker network inspect \$NETWORK_NAME  >/dev/null 2>&1 || docker network create \$NETWORK_NAME

            MYSQL_STATUS=\$(docker inspect -f '{{.State.Running}}' \$MYSQL_CONTAINER_NAME 2>/dev/null || echo "false")
            if [ "\$MYSQL_STATUS" != "true" ]; then
              echo "Starting MySQL container..."
              docker rm \$MYSQL_CONTAINER_NAME 2>/dev/null || true
              docker run -d --name \$MYSQL_CONTAINER_NAME \
                --restart unless-stopped \
                --network \$NETWORK_NAME \
                --cpus="0.5" \
                --memory="1g" \
                --memory-swap="1g" \
                -e MYSQL_ROOT_PASSWORD=\$MYSQL_ROOT_PASSWORD \
                -e MYSQL_DATABASE=\$SPRING_DATASOURCE_DATABASE \
                -e MYSQL_USER=\$SPRING_DATASOURCE_USERNAME \
                -e MYSQL_PASSWORD=\$SPRING_DATASOURCE_PASSWORD \
                -p 3306:3306 \
                mysql:8.0 \
                --character-set-server=utf8mb4 \
                --collation-server=utf8mb4_unicode_ci

              echo "Waiting for MySQL..."
              for i in {1..30}; do
                docker exec \$MYSQL_CONTAINER_NAME mysqladmin ping -uroot -p\$MYSQL_ROOT_PASSWORD --silent && break
                echo "Still waiting..."
                sleep 2
              done
            else
              echo "MySQL already running."
              docker network connect \$NETWORK_NAME  \$MYSQL_CONTAINER_NAME || true
            fi

            echo "Starting Spring Boot container..."
            docker run -d --name \$CONTAINER_NAME \
              --restart unless-stopped \
              --network \$NETWORK_NAME  \
              --cpus="1.0" \
              --memory="768m" \
              --memory-swap="1g" \
              -p $HOST_PORT:$CONTAINER_PORT \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL="jdbc:mysql://\$MYSQL_CONTAINER_NAME:3306/\$SPRING_DATASOURCE_DATABASE?useSSL=false&allowPublicKeyRetrieval=true&connectionTimeout=5000" \
              -e SPRING_DATASOURCE_USERNAME=\$SPRING_DATASOURCE_USERNAME \
              -e SPRING_DATASOURCE_PASSWORD=\$SPRING_DATASOURCE_PASSWORD \
              -e SPRING_FLYWAY_ENABLED=true \
              -e SPRING_FLYWAY_LOCATIONS=classpath:db/migration \
              -e SPRING_FLYWAY_BASELINE_ON_MIGRATION=true \
              \$IMAGE_URI

            echo "Deployment complete. Showing logs:"
            docker ps -a
            docker logs \$CONTAINER_NAME --tail 50
          EOF

          # Clean up the temporary credentials file from both local and remote
          rm -f ~/.aws/credentials
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "rm -f ~/.aws/credentials"
