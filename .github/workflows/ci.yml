name: SB App CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: sb-app-ec
  MYSQL_CONTAINER_NAME: sb-app
  SPRING_DATASOURCE_DATABASE: sb-app-db

jobs:
  setup-ec2:
    name: Setup EC2 with Docker and NGINX
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Install Docker and NGINX on EC2 if not installed
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e

            echo "Checking Docker..."
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ec2-user
            else
              echo "Docker already installed."
            fi

            echo "Checking NGINX..."
            if ! command -v nginx &> /dev/null; then
              echo "Installing NGINX..."
              sudo dnf install nginx -y
              sudo yum install -y nginx
              sudo systemctl start nginx
              sudo systemctl enable nginx
            else
              echo "NGINX already installed."
            fi

            echo "Docker version:"
            docker --version
            echo "NGINX status:"
            sudo systemctl status nginx
          EOF

  build-and-push:
    name: Build and Push Docker Image
    needs: setup-ec2
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.extract_version.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version is: $VERSION"

      - name: Build project
        run: mvn clean package -DskipTests=true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy-to-ec2:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy application to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << EOF
            set -e

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}"
            export MYSQL_CONTAINER_NAME="${{ env.MYSQL_CONTAINER_NAME }}"
            export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
            export SPRING_DATASOURCE_DATABASE="${{ env.SPRING_DATASOURCE_DATABASE }}"
            export SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}"
            export SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}"

            echo "Image tag is: '$IMAGE_TAG'"

            echo "Stopping previous containers..."
            docker stop \$IMAGE_NAME || true
            docker rm -f \$IMAGE_NAME || true

            echo "Logging in to Docker Hub..."
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

            echo "Pulling latest image..."
            docker pull \$IMAGE_TAG

            MYSQL_RUNNING=\$(docker inspect --format="{{.State.Running}}" \$MYSQL_CONTAINER_NAME 2>/dev/null || echo "false")
            if [ "\$MYSQL_RUNNING" != "true" ]; then
              echo "Starting MySQL container..."
              docker rm \$MYSQL_CONTAINER_NAME 2>/dev/null || true
              docker run -d --name \$MYSQL_CONTAINER_NAME \
                -e MYSQL_ROOT_PASSWORD=\$MYSQL_ROOT_PASSWORD \
                -e MYSQL_DATABASE=\$SPRING_DATASOURCE_DATABASE \
                -e MYSQL_USER=\$SPRING_DATASOURCE_USERNAME \
                -e MYSQL_PASSWORD=\$SPRING_DATASOURCE_PASSWORD \
                -p 3306:3306 \
                mysql:8.0 \
                --character-set-server=utf8mb4 \
                --collation-server=utf8mb4_unicode_ci

              echo "Waiting for MySQL to be ready..."
              for i in {1..30}; do
                if docker exec \$MYSQL_CONTAINER_NAME mysqladmin ping -uroot -p\$MYSQL_ROOT_PASSWORD --silent; then
                  echo "MySQL is ready!"
                  break
                else
                  echo "Waiting for MySQL..."
                  sleep 2
                fi
              done
            else
              echo "MySQL is already running."
            fi

            echo "Starting application container..."
            docker run -d --name \$IMAGE_NAME \
              --network host \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL="jdbc:mysql://localhost:3306/\$SPRING_DATASOURCE_DATABASE?useSSL=false&allowPublicKeyRetrieval=true" \
              -e SPRING_DATASOURCE_USERNAME="\$SPRING_DATASOURCE_USERNAME" \
              -e SPRING_DATASOURCE_PASSWORD="\$SPRING_DATASOURCE_PASSWORD" \
              -e SPRING_FLYWAY_ENABLED=true \
              -e SPRING_FLYWAY_LOCATIONS="classpath:db/migration" \
              -e SPRING_FLYWAY_BASELINE_ON_MIGRATION=true \
              \$IMAGE_TAG

            echo "Deployment complete. Logs:"
            docker ps -a
            docker logs \$IMAGE_NAME --tail 50
            docker logs \$MYSQL_CONTAINER_NAME --tail 20
          EOF
